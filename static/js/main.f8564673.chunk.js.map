{"version":3,"sources":["assets/img/logo.svg","assets/img/icons/html5.svg","assets/img/icons/sass.svg","assets/img/icons/javascript.svg","assets/img/icons/react.svg","assets/img/icons/angular.svg","assets/img/icons/gulp.svg","assets/img/icons/git.svg","assets/img/icons/figma.svg","assets/img/icons/adobexd.svg","assets/img/icons/invision.svg","assets/img/bill-lee.webp","assets/img/bill-lee.png","assets/img/camlab.webp","assets/img/camlab.png","assets/img/memory.webp","assets/img/memory.png","assets/img/pamela-gotti.png","assets/img/pamela-gotti.webp","assets/img/restyling.png","assets/js/components/projectsDB.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pamelaGottiWebp","pamelaGottiImg","billWebp","billImg","camlabWebp","camlabImg","memoryWebp","memoryImg","App","className","src","restyling","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,iVCY9BC,EACJC,IASIC,IACJC,IAQIC,IACJC,IASIC,IACJC,I,gBCdMC,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,qDACA,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAWC,IAAI,iBCLbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f8564673.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.aab9b650.svg\";","module.exports = __webpack_public_path__ + \"static/media/html5.2895d162.svg\";","module.exports = __webpack_public_path__ + \"static/media/sass.68354d0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/javascript.5b2bb487.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.eab72955.svg\";","module.exports = __webpack_public_path__ + \"static/media/angular.d42820e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/gulp.269e9c27.svg\";","module.exports = __webpack_public_path__ + \"static/media/git.3343bf35.svg\";","module.exports = __webpack_public_path__ + \"static/media/figma.d5726205.svg\";","module.exports = __webpack_public_path__ + \"static/media/adobexd.a3710b8d.svg\";","module.exports = __webpack_public_path__ + \"static/media/invision.3efcd5a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/bill-lee.457e2bc3.webp\";","module.exports = __webpack_public_path__ + \"static/media/bill-lee.b0357c0d.png\";","module.exports = __webpack_public_path__ + \"static/media/camlab.d786400c.webp\";","module.exports = __webpack_public_path__ + \"static/media/camlab.1b8a5543.png\";","module.exports = __webpack_public_path__ + \"static/media/memory.7444fc4f.webp\";","module.exports = __webpack_public_path__ + \"static/media/memory.e27b1ebd.png\";","module.exports = __webpack_public_path__ + \"static/media/pamela-gotti.04f9d54e.png\";","module.exports = __webpack_public_path__ + \"static/media/pamela-gotti.467bd71f.webp\";","module.exports = __webpack_public_path__ + \"static/media/restyling.58cddc1e.png\";","import billWebp from '../../img/bill-lee.webp';\nimport billImg from '../../img/bill-lee.png';\nimport camlabWebp from '../../img/camlab.webp';\nimport camlabImg from '../../img/camlab.png';\nimport memoryWebp from '../../img/memory.webp';\nimport memoryImg from '../../img/memory.png';\nimport pamelaGottiImg from '../../img/pamela-gotti.png';\nimport pamelaGottiWebp from '../../img/pamela-gotti.webp';\n\nconst projectDB = [\n  {\n    id: 'pamelaGotti',\n    webpImg: pamelaGottiWebp,\n    img: pamelaGottiImg,\n    title: 'Pamela Gotti',\n    desc:\n      'Sito personale della psicologa, ipnologa e consulente sessuola, Pamela Gotti',\n    viewCase: '#',\n    linkSite: '#'\n  },\n  {\n    id: 'billLee',\n    webpImg: billWebp,\n    img: billImg,\n    title: 'Bill Lee',\n    desc: 'Sito personale del grande artista e musicista Bill Lee Curtis',\n    viewCase: '#',\n    linkSite: 'https://www.billleecurtis.com/'\n  },\n  {\n    id: 'camlab',\n    webpImg: camlabWebp,\n    img: camlabImg,\n    title: 'CamLab Trieste',\n    desc:\n      'Gruppo professionale di wellness e cura della persona situato a Trieste',\n    viewCase: '#',\n    linkSite: 'https://www.camlabtrieste.com/'\n  },\n  {\n    id: 'memory',\n    webpImg: memoryWebp,\n    img: memoryImg,\n    title: 'Memory Game',\n    desc:\n      'Browser game creato per il programma Front End NanoDegree su Udacity',\n    viewCase: '#',\n    linkSite: 'https://www.markonikolajevic.com/memory-game/'\n  }\n];\n\nexport default projectDB;\n","import React from 'react';\n\nimport './assets/style/App.sass';\n\nimport Header from './assets/js/components/Header';\nimport About from './assets/js/components/About';\nimport Portfolio from './assets/js/components/Portfolio';\nimport Form from './assets/js/components/Form';\nimport Footer from './assets/js/components/Footer';\n\nimport restyling from './assets/img/restyling.png';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h1>Restyling in corso...</h1>\n      <div className='restyling'>\n        <img src={restyling} alt='developer' />\n      </div>\n      {/* <Header />\n      <About />\n      <Portfolio />\n      <Form />\n      <Footer /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}